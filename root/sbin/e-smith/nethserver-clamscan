#!/usr/bin/perl -w
#----------------------------------------------------------------------
# Clam Antivirus virus scanner filesystem scanning.
#
# copyright (C) 2004 Shad L. Lords <slords@mail.com>
# Copyright (C) 2005 Gordon Rowell <gordonr@gormand.com.au>
# 2017 stephane de Labrusse <stephdl@de-labrusse.fr>
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License or more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
#----------------------------------------------------------------------

use strict;
use esmith::ConfigDB;

my $db = esmith::ConfigDB->open_ro or die "Couldn't open ConfigDB";
my $q = esmith::ConfigDB->open('quarantine') || esmith::ConfigDB->create('quarantine')
    || die 'cannot open quarantine database';

# first remove the found in quarantine db
my @found = $q->get_all_by_prop(type => 'found');
foreach my $found (@found) {
    my $key= $found->key;
    $q->get($key)->delete;
}

#determine the scan periodicity and the folders to scan
my $scan = $db->get_prop("clamscan", "FilesystemScan") || '';
my $filesystems = $db->get_prop("clamscan", "FilesystemScanFilesystems") || '/';

$filesystems = '/'. $filesystems unless $filesystems =~ /^\//;
#when the job is cron based, then do full scan
$filesystems = ($scan eq "now") ? $filesystems : '/';

my $MailReport = $db->get_prop("clamscan", "FilesystemScanReportTo") || 'root';

my $Custom = $db->get_prop("clamscan", "customSettings") || '';

my $maxscanfile = $db->get_prop("clamscan", "MaxScanFile") || '45';
	$maxscanfile = $maxscanfile . 'M';

my $clamscan_opts = " --recursive --infected --stdout";
        #	    " --log /var/log/clamav/clamscan.log";

$clamscan_opts .= " --max-files=10000 --max-filesize=$maxscanfile " .
		    " --max-scansize=$maxscanfile --max-recursion=16 --max-dir-recursion=15";

my $quarantine_dir = $db->get_prop("clamscan", "QuarantineDirectory") ||
		"/var/spool/clamav/quarantine";

#exclusion
my @exclude = split /\s+/, ($db->get_prop("clamscan", "FilesystemScanExclude") || "");
push @exclude, $quarantine_dir;
foreach my $exclude (@exclude) {
	if ($exclude =~ m/^\//) {
		$clamscan_opts .= " --exclude-dir=^$exclude";
	}
	else {
		$clamscan_opts .= " --exclude=^$exclude";
	}
}

$clamscan_opts .= " --move=$quarantine_dir"
if (($db->get_prop("clamscan", "Quarantine") || "disabled")
  && ($db->get_prop("clamscan", "reallyWantToMove") || "disabled")) eq "enabled";

$clamscan_opts .= " --official-db-only=yes"
        if ($db->get_prop("clamscan", "FilesystemScanUnofficialSigs") || 'disabled') ne "enabled";

## use Bytecode
## http://blog.clamav.net/2014/11/brief-re-introduction-to-clamav.html
$clamscan_opts .= " --bytecode=yes"
        if ($db->get_prop("clamscan", "Bytecode") || 'enabled') eq "enabled";

if (($db->get_prop("clamscan", "Bytecode") || 'enabled') eq "enabled") {
	my $bytecodetimeout = $db->get_prop("clamscan", "BytecodeTimout") ||
		"120000";
	$clamscan_opts .= " --bytecode-timeout=$bytecodetimeout";

$clamscan_opts .= " --bytecode-unsigned=yes"
        if ($db->get_prop("clamscan", "BytecodeUnsigned") || 'disabled') eq "enabled";
}

## detect PUA
##see complete list at http://www.clamav.net/documents/potentially-unwanted-applications-pua

$clamscan_opts .= " --detect-pua=yes"
        if ($db->get_prop("clamscan", "DetectPua") || 'disabled') eq "enabled";

my @puainclude = split /,/, ($db->get_prop("clamscan", "IncludePua") || '');

if (($db->get_prop("clamscan", "DetectPua") || 'disabled') eq "enabled") {
$clamscan_opts .= " --include-pua=$_" for (@puainclude)
}

###  Scanning
$clamscan_opts .= " --scan-html=yes --max-htmlnormalize=$maxscanfile --max-htmlnotags=$maxscanfile --max-scriptnormalize=$maxscanfile"
      if ($db->get_prop("clamscan", "ScanHTML") || "enabled") eq "enabled";

$clamscan_opts .= " --scan-mail=yes"
        if ($db->get_prop("clamscan", "ScanMail") || "enabled") eq "enabled";

$clamscan_opts .= " --scan-archive=yes"
        if ($db->get_prop("clamscan", "ScanArchive") || "enabled") eq "enabled";

$clamscan_opts .= " --scan-pdf=yes"
        if ($db->get_prop("clamscan", "ScanPdf") || "enabled") eq "enabled";

$clamscan_opts .= " --scan-ole2=yes"
        if ($db->get_prop("clamscan", "ScanOle2") || "enabled") eq "enabled";

$clamscan_opts .= " --scan-elf=yes"
        if ($db->get_prop("clamscan", "ScanElf") || "enabled") eq "enabled";

$clamscan_opts .= " --scan-pe=yes --max-embeddedpe=$maxscanfile --max-iconspe=100"
        if ($db->get_prop("clamscan", "ScanPe") || "enabled") eq "enabled";

$clamscan_opts .= " --scan-swf=yes"
        if ($db->get_prop("clamscan", "ScanSwf") || "enabled") eq "enabled";

$clamscan_opts .= " --scan-xmldocs=yes"
        if ($db->get_prop("clamscan", "ScanXML") || "enabled") eq "enabled";

$clamscan_opts .= " --scan-hwp3=yes --max-rechwp3=16"
        if ($db->get_prop("clamscan", "ScanHwp") || "enabled") eq "enabled";

##enhance detection
$clamscan_opts .= " --detect-broken=yes"
        if ($db->get_prop("clamscan", "DetectBroken") || "disabled") eq "enabled";

$clamscan_opts .= " --block-encrypted=yes"
        if ($db->get_prop("clamscan", "BlockEncrypted") || "disabled") eq "enabled";

$clamscan_opts .= " --block-macros=yes"
        if ($db->get_prop("clamscan", "BlockMacros") || "disabled") eq "enabled";

$clamscan_opts .= " --algorithmic-detection=yes"
        if ($db->get_prop("clamscan", "AlgoDetection") || "disabled") eq "enabled";

$clamscan_opts .= " --detect-structured=yes"
        if ($db->get_prop("clamscan", "DetectStructured") || "disabled") eq "enabled";

$clamscan_opts .= " --partition-intersection=yes --max-partitions=50"
        if ($db->get_prop("clamscan", "PartInstersection") || "disabled") eq "enabled";

$clamscan_opts .= " --phishing-sigs=yes"
        if ($db->get_prop("clamscan", "PhishingSigs") || "disabled") eq "enabled";

$clamscan_opts .= " --phishing-scan-urls=yes"
        if ($db->get_prop("clamscan", "PhishingScanUrl") || "disabled") eq "enabled";


#launch clamscan
open CLAMSCAN, "-|", "nice /usr/bin/clamscan $clamscan_opts $Custom $filesystems 2> /var/log/clamav/clamscan-errors.log";

my $date = localtime;
my @report;
@report = <CLAMSCAN>;
unshift  @report, ("\n------------------------------------\n\t" . $date,
                   "\nScanned Folder: ".$filesystems);
close CLAMSCAN;

#we want to write our own log because clamav doesnt write the date and the scanned folder in it.
open (FILE, ">>","/var/log/clamav/clamscan.log") or die $!;
print FILE @report;
close FILE;

#email the rapport
my $hostname = $db->get_value("SystemName") . "." .
	$db->get_value("DomainName");

open MAIL, "| /bin/mail " .
	"-s \"[$hostname] Clam Antivirus Scan Results - $date\" $MailReport";
print MAIL @report;
close MAIL;

## populate quarantine database
# we are looking to :
#    /boot/efi/EFI/redhat/grub.efi: Heuristics.Broken.Executable FOUND
#    /boot/efi/EFI/redhat/grub.efi: moved to '/var/spool/clamav/quarantine/grub.efi'

foreach my $test (@report)
{
    #we want to know, why the rule matched and we store it to quarantine db
    # we use a 'found' type, we could make a table of it
    if ( $test =~ /(.*:)(.*)(FOUND)/)
    {
         my $t1 = $1;
         my $t2 = $2;
         $t1 =~ s/:$//g;
         my $ID = $t1;
         $ID =~ s/=//g;

         #we don't want injection
         my $protect = "[\'\(\)\<\>\"\|]";
         next if ($t1 =~ /$protect/);
         next if ($t2 =~ /$protect/);
         $q->set_prop($ID,'ruleMatch',$t2,type => 'found');
         $q->set_prop($ID,'filePath',$t1);
    }
    if ( $test =~ /(.*)(: moved to )(.*)/)
    {
         my $t3 = $3;
         my $t1 = $1;
         $t3 =~ s/^'//;
         $t3 =~ s/'$//;
         my $ID = $t1;
         $ID =~ s/=//g;

         #we don't want injection
         my $protect = "[\'\(\)\<\>\"\|]";
         next if ($t1 =~ /$protect/);
         next if ($t3 =~ /$protect/);
         # if we find it inside the db (most probable), we retrieve the matched rule
         # and we store it again with quarantined type
         if ($q->get_prop($ID,'filePath')) {
             my $rule = $q->get_prop_and_delete ($ID, 'ruleMatch');
             my $key = $q->get($ID);
             $key->delete;
             $q->set_prop($ID,'quarantine',$t3,type => 'quarantined');
             $q->set_prop($ID,'ruleMatch',$rule);
             $q->set_prop($ID,'filePath',$t1);
         }
    }
}
